import rlcompleter, readline
readline.parse_and_bind('tab:complete')

def logdebug():
    import logging
    logging.basicConfig(level=logging.DEBUG)
    logging.getLogger(__name__).debug('debug logging enabled')

def jwrite(d, path):
    import json
    if isinstance(d, str):
        d = json.loads(d)
    with open(path, 'w') as of:
        of.write(json.dumps(d, indent=2, sort_keys=True))

def jread(path):
    import json
    with open(path) as of:
        return json.loads(of.read())

def lprint(l):
    for idx, v in enumerate(l):
        print(f'{idx}: {v}')

def jprint(d):
    import json
    if isinstance(d, str):
        d = json.loads(d)
    print(json.dumps(d, indent=2, sort_keys=True))

def CamelCase2lower_case(s):
    chars = [ x for x in s ]
    newname = chars.pop(0).lower()
    for c in chars:
        if c.isupper():
            newname += '_'
            newname += c.lower()
        else:
            newname += c
    return newname

def stddev(nset):
    import math
    mean = sum(nset) / len(nset)
    vset = [ (x - mean)**2 for x in nset ]
    sd = math.sqrt(sum(vset) / (len(nset) - 1))
    print('sd     : %s' % sd)
    print('min sd : %s' % (mean - sd))
    print('max sd : %s' % (mean + sd))

def getsoup(url):
    import requests
    from bs4 import BeautifulSoup
    r = requests.get(url)
    return BeautifulSoup(r.text, 'html.parser')

def chromeopen(url):
    from subprocess import call
    call(['google-chrome-stable', '--incognito', url])

def iterfiles(d):
    import os
    for root, dirs, files in os.walk(d):
        for fname in files:
            yield os.path.join(root, fname)
